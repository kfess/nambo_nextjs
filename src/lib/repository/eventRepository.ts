import { PrismaClient, Event as PrismaEvent } from "@prisma/client";
import { Event } from "@/lib/domain/event";

export interface IEventRepository {
  createEvent: (eventData: Event) => Promise<PrismaEvent>;
  getEvent: (eventId: string) => Promise<PrismaEvent | null>;
  updateEvent: (id: string, eventData: Event) => Promise<PrismaEvent>;
}

export class EventRepository implements IEventRepository {
  constructor(private prisma: PrismaClient) {}

  async createEvent(eventData: Event): Promise<PrismaEvent> {
    // eventId is automatically generated by Prisma.
    // So, we don't need to pass it to the Prisma.
    return await this.prisma.event.create({
      data: {
        eventName: eventData.eventName,
        memo: eventData.memo,
        fromDate: eventData.fromDate,
        toDate: eventData.toDate,
        moneyUnit: eventData.moneyUnit,
        members: {
          create: eventData.members,
        },
      },
    });
  }

  async getEvent(eventId: string): Promise<PrismaEvent | null> {
    return await this.prisma.event.findUnique({
      where: { eventId },
      include: { members: true },
    });
  }

  async updateEvent(eventId: string, eventData: Event): Promise<PrismaEvent> {
    return await this.prisma.event.update({
      where: { eventId },
      data: {
        ...eventData,
        members: { create: eventData.members },
      },
    });
  }
}
