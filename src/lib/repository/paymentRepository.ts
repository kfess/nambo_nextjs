import { PrismaClient, Payment as PrismaPayment } from "@prisma/client";
import { Payment } from "@/lib/domain/payment";
import { PaymentType } from "@/lib/domain/paymentSchema";

export interface IPaymentRepository {
  createPayment: (paymentData: Payment) => Promise<PaymentType>;
  getPayment: (paymentId: string) => Promise<PaymentType | null>;
  getPayments: (eventId: string) => Promise<PaymentType[]>;
  updatePayment: (
    paymentId: string,
    paymentData: Payment
  ) => Promise<PaymentType>;
  deletePayment: (paymentId: string) => Promise<PaymentType>;
  getInvolvedMembers: (eventId: string) => Promise<string[]>; // 支払いに関与しているメンバーの一覧を取得する
}

export class PaymentRepository implements IPaymentRepository {
  constructor(private prisma: PrismaClient) {}

  async createPayment(paymentData: Payment): Promise<PaymentType> {
    // paymentId is automatically generated by Prisma.
    // So, we don't need to pass it to the Prisma.
    const prismaPayment = await this.prisma.payment.create({
      data: {
        eventId: paymentData.eventId,
        purpose: paymentData.purpose,
        payerId: paymentData.payer.id,
        payees: {
          create: paymentData.payees.map((payee) => ({
            memberId: payee.id,
          })),
        },
        cost: paymentData.cost,
      },
      include: {
        payer: true,
        payees: { include: { member: true } },
      },
    });

    return this.toDomain(prismaPayment);
  }

  async getPayment(paymentId: string): Promise<PaymentType | null> {
    const prismaPayment = await this.prisma.payment.findUnique({
      where: { paymentId },
      include: {
        payer: true,
        payees: { include: { member: true } },
      },
    });

    if (!prismaPayment) return null;
    return this.toDomain(prismaPayment);
  }

  async getPayments(eventId: string): Promise<PaymentType[]> {
    const prismaPayments = await this.prisma.payment.findMany({
      where: { eventId },
      include: {
        payer: true,
        payees: { include: { member: true } },
      },
    });

    return prismaPayments.map((prismaPayment) => this.toDomain(prismaPayment));
  }

  async updatePayment(
    paymentId: string,
    paymentData: Payment
  ): Promise<PaymentType> {
    const prismaPayment = await this.prisma.payment.update({
      where: { paymentId },
      data: {
        eventId: paymentData.eventId,
        purpose: paymentData.purpose,
        payerId: paymentData.payer.id,
        payees: {
          create: paymentData.payees.map((payee) => ({
            memberId: payee.id,
          })),
        },
        cost: paymentData.cost,
      },
      include: { payees: true },
    });

    return this.toDomain(prismaPayment);
  }

  async deletePayment(paymentId: string): Promise<PaymentType> {
    const deletedPayment = await this.prisma.$transaction(async (prisma) => {
      // 支払われる人（payee）の削除
      await prisma.payee.deleteMany({ where: { paymentId } });
      // 支払い情報の削除
      const deletedPayment = await prisma.payment.delete({
        where: { paymentId },
        include: {
          payer: true,
          payees: { include: { member: true } },
        },
      });
      return deletedPayment;
    });

    return this.toDomain(deletedPayment);
  }

  // 支払いに関与しているメンバーの一覧を取得する
  async getInvolvedMembers(eventId: string): Promise<string[]> {
    const prismaPayments = await this.prisma.payment.findMany({
      where: { eventId },
      include: { payees: true },
    });

    const members = new Set<string>();
    prismaPayments.forEach((prismaPayment) => {
      members.add(prismaPayment.payerId);
      prismaPayment.payees.forEach((payee) => members.add(payee.memberId));
    });

    return Array.from(members);
  }

  // Prisma の Payment を Domain の Payment に変換するためのメソッド
  toDomain(
    prismaPayment: PrismaPayment & {
      payer: {
        id: number;
        memberId: string;
        name: string;
        ratio: number;
        eventId: string;
      };
      payees: ({
        member: {
          id: number;
          memberId: string;
          name: string;
          ratio: number;
          eventId: string;
        };
      } & {
        id: number;
        memberId: string;
        paymentId: string;
      })[];
    }
  ): Payment {
    return new Payment({
      paymentId: prismaPayment.paymentId,
      eventId: prismaPayment.eventId,
      purpose: prismaPayment.purpose,
      payer: {
        id: prismaPayment.payer.memberId,
        name: prismaPayment.payer.name,
      },
      payees: prismaPayment.payees.map((payee) => ({
        id: payee.memberId,
        name: payee.member.name,
      })),
      cost: prismaPayment.cost,
    });
  }
}
